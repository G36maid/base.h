name: Run Tests Windows
on:
  push:
    paths:
      - '**/*.c'
      - '**/*.h'

permissions:
  contents: read
  actions: read

jobs:
  test-modules:
    runs-on: windows-latest
    
    strategy:
      matrix:
        compiler: [gcc, clang, msvc]
    
    steps:
    - name: Checkout code with submodules
      uses: actions/checkout@v3
      with:
        submodules: recursive
        fetch-depth: 0  
        token: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Setup MSYS2
      if: matrix.compiler != 'msvc'
      uses: msys2/setup-msys2@v2
      with:
        msystem: MINGW64
        update: true
        cache: true
        install: >-
          mingw-w64-x86_64-gcc
          mingw-w64-x86_64-clang
    
    - name: Run tests with GCC/Clang
      if: matrix.compiler != 'msvc'
      working-directory: ./tests
      shell: msys2 {0}
      run: |
        for test in arena-tests file-system-tests ini-parser-tests string-tests vector-tests; do
          echo "Running $test with ${{ matrix.compiler }}..."
          ${{ matrix.compiler }} $test.c -o $test.exe
          ./$test.exe
          if [ $? -ne 0 ]; then
            echo "$test failed with ${{ matrix.compiler }}"
            exit 1
          fi
        done
    
    - name: Run tests with MSVC
      if: matrix.compiler == 'msvc'
      working-directory: ./tests
      shell: cmd
      run: |
        call "C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Auxiliary\Build\vcvars64.bat"
        @echo off
        setlocal enabledelayedexpansion
        set tests=arena-tests file-system-tests ini-parser-tests string-tests vector-tests
        
        for %%t in (%tests%) do (
          echo Running %%t with MSVC...
          cl.exe /Fe:%%t.exe %%t.c
          %%t.exe
          if !errorlevel! neq 0 (
            echo "%%t failed with MSVC"
            exit /b 1
          )
        )
